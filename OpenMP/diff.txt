17a18,19
> #include<omp.h>
> #include<time.h>
315a318
> 	//float culture[rows*columns];
316a320
> 	//short culture_cells[rows*columns];
321,325c325,329
< 
< 	#pragma omp parallel for	
< 	for( i=0; i<rows*columns; i++ )
< 		culture[i] = 0.0f;
< 	//memset(culture, 0.0f, sizeof(float) * (size_t)rows*(size_t)columns);
---
> 	//#pragma omp parallel for
> 	//for( i=0; i<rows*columns; i++ )
> 	//		culture[i] = 0.0f;
> 	#pragma omp parallel
> 	memset(culture,0.0f,sizeof(float)* (size_t)rows*(size_t)columns);
367,373c371
< 	/* 4. Simulation */	
< 	int num_new_sources = (int)(rows * columns * food_density);
< 
< 	double *random_row = malloc(num_new_sources * sizeof(double));
< 	double *random_col = malloc(num_new_sources * sizeof(double));
< 	double *random_food = malloc(num_new_sources * sizeof(double));
< 
---
> 	/* 4. Simulation */
383,395c381,382
< 
< 		if (!(random_row && random_col && random_food)) {
< 			fprintf(stderr,"-- Error allocating random sequences for size: %d\n", num_new_sources );
< 			exit( EXIT_FAILURE );
< 		}
< 
< 		for (i = 0; i < num_new_sources; i++) {
< 			random_row[i] = erand48( food_random_seq );
< 			random_col[i] = erand48( food_random_seq );
< 			random_food[i] = erand48( food_random_seq );
< 		}
< 
< 		#pragma omp parallel for
---
> 		int num_new_sources = (int)(rows * columns * food_density);		
> 		//#pragma omp parallel for
397,399c384,386
< 			int row = (int)(rows * random_row[i]);
< 			int col = (int)(columns * random_col[i]);
< 			float food = (float)( food_level * random_food[i]);
---
> 			int row = (int)(rows * erand48( food_random_seq ));
> 			int col = (int)(columns * erand48( food_random_seq ));
> 			float food = (float)( food_level * erand48( food_random_seq ));
402d388
< 
417,421c403,409
< 		/* 4.2.1. Clear ancillary structure of the culture to account alive cells in a position after movement */
< 		#pragma omp parallel for
< 		for( i=0; i<rows*columns; i++ )
< 			culture_cells[i] = 0;
< 		//memset(culture_cells, 0.0f, sizeof(short) * (size_t)rows*(size_t)columns);
---
> 		/* 4.2.1. Clear ancillary structure of the culture to account alive cells in a position after movement */		
> 		//#pragma omp parallel 
> 			//for( i=0; i<rows; i++ )
> 			//#pragma omp parallel for 
> 			//for(j=0;j<columns;j++)
> 				memset(culture_cells,0.0f,sizeof(short)* (size_t)rows*(size_t)columns);
> 				//culture_cells[i*columns+j] = 0.0f;
423a412
> 		//float food_to_share[num_cells];
488a478
> 		//Cell new_cells[num_cells];
536d525
< 		#pragma omp parallel for
569a559
> 		
576,579c566,568
< 			float tmp = culture[i] * 0.95f; // Reduce 5%
< 			culture[i] = tmp;
< 			if ( tmp > current_max_food ) 
< 				current_max_food = tmp;
---
> 			culture[i] *= 0.95f; // Reduce 5%
> 			if ( culture[i] > current_max_food ) 
> 				current_max_food = culture[i];
600,604c589
< 	free(random_row);
< 	free(random_col);
< 	free(random_food);
< 
< 
---
> 	
